const cds = require('../cds')
const LOG = cds.log('bind');
const resolveBinding = resolver(LOG);
const { platformText, bindingText } = require('./bindingUtil');

function getUnresolvedBindings({cwd = process.cwd(), env}) {
    if (!env) env = cds.env.for('cds', cwd)
    if (feature(env) === false || feature(env) === "false") return {}

    const bindings = {}
    const requires = env.requires || {}
    for (const name in requires) {
        const service = requires[name]
        if (service && service.binding && !service.binding.resolved) {
            bindings[name] = {...service.binding, kind: service.kind }
        }
    }

    return bindings
}

async function resolveBindings({bindings, cwd = process.cwd(), env, output = 'info', cache = {} }) {
    bindings = bindings || getUnresolvedBindings({cwd, env})
    if (Object.keys(bindings).length===0) return undefined
    LOG[output](`resolving cloud service bindings...`)

    const resolvedBindings = {}

    await Promise.all( Object.keys(bindings).map( async name => {
        const binding = bindings[name]
        const cacheKey = JSON.stringify(binding)
        let resolvedBinding
        if (!cache[cacheKey]) {
            resolvedBinding = cache[cacheKey] = await resolveBinding(name, binding)
            LOG[output](`bound ${name} to ${platformText(binding)} ${bindingText(binding)}`)
        } else {
            resolvedBinding = cache[cacheKey]
        }

        resolvedBindings[name] = resolvedBinding
    } ))

    return Object.keys(resolvedBindings).length > 0 ? resolvedBindings : undefined
}

let cfKeyProvider
let kubernetesCredentialsProvider

function resolver(log) {
    return function resolveBinding(name, binding) {
        switch (binding.type) {
            case 'cf':
                if (!cfKeyProvider) {
                    cfKeyProvider = require('./cfKeyProvider');
                    cfKeyProvider.setLogger(log);
                }
                return cfKeyProvider.resolve(name, binding)
            case 'k8s':
                if (!kubernetesCredentialsProvider) {
                    kubernetesCredentialsProvider = require('./kubernetesCredentialsProvider')
                    kubernetesCredentialsProvider.setLogger(log)
                }
                return kubernetesCredentialsProvider.resolve(name, binding)
            default:
                throw new Error(`Unsupported binding type "${binding.type}" for service "${name}".`)
        }
    }
}

function feature(env) {
    return env.features && env.features.dk && env.features.dk.resolveBindingsForTesting
}

module.exports = {
    resolver,
    resolveBindings,
    getUnresolvedBindings
}
