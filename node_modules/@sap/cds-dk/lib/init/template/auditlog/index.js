const path = require('path')
const { copy } = require('../../../cds').utils
const ProjectReader = require('../../util/projectReader')
const { mergeYAML } = require('../../util/merge')
const { srvNode, srvJava, auditlog } = require('../_merging/registry-mta')

module.exports = class AuditlogTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    static hasFacet() {
        return false // TODO: Need a `cds.requires.auditlog` or some other way to detect if enabled.
    }

    async run() {
        await this.runDependentMerging()
    }

    async runDependentMerging() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { isNodejs, hasMta, hasHelm } = projectDescriptor.cap

        if (hasMta) {
            const mtaYAMLPath = path.join(this.projectPath, 'mta.yaml')
            const srv = isNodejs ? srvNode : srvJava
            await mergeYAML(
                mtaYAMLPath,
                `${__dirname}/files/mta.yaml.hbs`,
                projectDescriptor,
                {
                    additions: [srv, auditlog],
                    relationships: [{
                        insert: [auditlog, 'name'],
                        into: [srv, 'requires', 'name']
                    }]
                }
            )
        }

        if (hasHelm) {
            await mergeYAML(
                path.join(this.projectPath, 'chart', 'values.yaml'),
                {
                    srv: { bindings: {
                        auditlog: { serviceInstanceName: 'auditlog' }
                    }},
                    auditlog: {
                        serviceOfferingName: 'auditlog-api',
                        servicePlanName: 'default'
                    }
                },
                null, { forceOverwrite: true }
            )
            await copy(path.join(__dirname, 'files', 'auditlog.yaml'), path.join(this.projectPath, 'chart', 'templates', 'auditlog.yaml'))
        }
    }
}
