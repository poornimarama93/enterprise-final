const path = require('path')
const ProjectReader = require('../../util/projectReader')
const { mergeYAML } = require('../../util/merge')
const cds = require('../../../cds'), { copy } = cds.utils

module.exports = class ConnectivityTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    async run() {
        await this.runDependentMerging()
    }

    async runDependentMerging() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { hasHelm } = projectDescriptor.cap

        if (hasHelm) {
            await mergeYAML(
                path.join(this.projectPath, 'chart', 'values.yaml'),
                path.join(__dirname, 'files', 'values.yaml.hbs'),
                projectDescriptor,
                { additions: [{
                    ref: `srv-additional-volumes`,
                    in: `srv.additionalVolumes`,
                    where: [{
                        property: 'name',
                        isEqualTo: 'connectivity-secret'
                    }]
                }]}
            )
            const filesPath = path.join(__dirname, 'files')
            const templatesPath = path.join(this.projectPath, 'chart', 'templates')
            await copy(path.join(filesPath, 'connectivity-binding.yaml'), path.join(templatesPath, 'connectivity-binding.yaml'))
            await copy(path.join(filesPath, 'connectivity-proxy-info.yaml'), path.join(templatesPath, 'connectivity-proxy-info.yaml'))
            await copy(path.join(filesPath, 'connectivity.yaml'), path.join(templatesPath, 'connectivity.yaml'))
        }
    }
}
