const path = require('path')
const { copy } = require('../../../cds').utils
const ProjectReader = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { srvNode, srvJava, enterpriseMessaging } = require('../_merging/registry-mta')

module.exports = class EnterpriseMessagingTemplate extends require('../templateBase') {
  constructor(projectPath, generator) {
    super(projectPath, generator, __dirname)
    this.projectReader = new ProjectReader(projectPath)
  }

  static hasFacet(env) {
    return env.requires?.messaging === 'enterprise-messaging'
  }

  async run() {
    const projectDescriptor = await this.projectReader.read(this.options)
    const { for: forProfile, isNodejs } = projectDescriptor.cap
    const templatePath = path.join(__dirname, 'files')
    const cdsTemplateFile = (isNodejs ? 'cds.package.json' : 'cdsrc.json') + (forProfile ? '.hbs' : '')
    const cdsTemplatePath = path.join(templatePath, cdsTemplateFile)
    const configPath = path.join(this.projectPath, isNodejs ? 'package.json' : '.cdsrc.json')
    await mergeJSON(configPath, cdsTemplatePath, projectDescriptor)
    await this.runDependentMerging()
  }

  async runDependentMerging() {
    const projectDescriptor = await this.projectReader.read(this.options)
    const { hasHelm, hasMta, isNodejs } = projectDescriptor.cap

    if (hasMta) {
      const mtaYAMLPath = path.join(this.projectPath, 'mta.yaml')
      const srv = isNodejs ? srvNode : srvJava
      await mergeYAML(
          mtaYAMLPath,
          `${__dirname}/files/mta.yaml.hbs`,
          projectDescriptor,
          {
              additions: [srv, enterpriseMessaging],
              relationships: [{
                  insert: [enterpriseMessaging, 'name'],
                  into: [srv, 'requires', 'name']
              }]
          }
      )
    }

    if (hasHelm) {
      await mergeYAML(
        path.join(this.projectPath, 'chart', 'values.yaml'),
        path.join(__dirname, 'files', 'values.yaml'),
        null, { forceOverwrite: true }
      )
      await copy(
         path.join(__dirname, 'files', 'event-mesh.yaml'),
         path.join(this.projectPath, 'chart', 'templates', 'event-mesh.yaml')
      )
    }
  }
}
