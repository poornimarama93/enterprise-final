const path = require('path');
const cds = require('../../../cds')
const { fs, read, write } = cds.utils
const commandUtil = require('../../util/commandUtil');
const mvnArchetypes = require('../../util/mvnArchetypeUtil');
const term = require('../../../util/term');
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { copyFiles } = require('../../util/templateUtil')
const ProjectReader = require('../../util/projectReader');
const versionCompare = require('../../util/versionCompare');

const { PROJECT_TYPE, OPTION_JAVA, URLS } = require('../../constants');

const { srvNode, srvJava, hdbDeployer, serviceManager, hdiContainer, mtxSidecar } = require('../_merging/registry-mta');

module.exports = class HanaTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.projectReader = new ProjectReader(projectPath);
    }

    static hasFacet(env) {
        return env.requires?.db?.kind === 'hana'
    }

    async canRun() {
        const cds = require('../../../cds')
        if (versionCompare(cds.version, '5.9.0') < 0) {
            cds.error('The added configuration requires @sap/cds 5.9.0 or higher. Please update @sap/cds to the latest version and run \x1b[1mcds add hana\x1b[0m again.')
        }
        return true
    }

    async run() {
        const env = await this.getEnv();

        const hdiConfigPath = path.join(this.projectPath, env.folders.db, 'src', '.hdiconfig');
        const hdiConfigTemplatePath = path.join(__dirname, 'files', 'common', 'src', '.hdiconfig');
        await mergeJSON(hdiConfigPath, hdiConfigTemplatePath);

        const undeployJSONPath = path.join(this.projectPath, env.folders.db, 'undeploy.json');
        const undeployJSONTemplatePath = path.join(__dirname, 'files', 'common', 'undeploy.json');
        await mergeJSON(undeployJSONPath, undeployJSONTemplatePath);

        const projectType = await this.getProjectType();
        switch (projectType) {
            case PROJECT_TYPE.java: {
                await copyFiles(path.join(__dirname, 'files', 'java', 'db'), path.join(this.projectPath, env.folders.db), {}, this.options.force);
                await this._updatePomXml();
                await this._updateCdsConfiguration();
                break;
            }
            case PROJECT_TYPE.nodejs: {
                await this._updatePackageJson()
                break;
            }
            default: break;
        }
        await this.runDependentMerging()
    }


    async runDependentMerging() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { hasMta, hasHelm, isNodejs, isJava, isMultitenant } = projectDescriptor.cap

        if (isMultitenant) {
            await this._updateCdsConfiguration()
        }

        if (hasMta) {
            const srv = isNodejs ? srvNode : srvJava
            const db = isMultitenant ? serviceManager : hdiContainer
            const deletions = isMultitenant ? [{
                item: hdbDeployer,
                relationships: [{
                    removeProperty: 'name',
                    allWithin: ['modules', 'requires', 'name'],
                }]
            }, {
                item: hdiContainer,
                relationships: [{
                    removeProperty: 'name',
                    allWithin: ['modules', 'requires', 'name'],
                }]
            }] : []

            const mtaYAMLPath = path.join(this.projectPath, 'mta.yaml')

            const relationships = [{
                insert: [db, 'name'],
                into: [srv, 'requires', 'name']
            }]

            if (!isMultitenant) {
                relationships.push({
                    insert: [hdiContainer, 'name'],
                    into: [hdbDeployer, 'requires', 'name']
                })
            }

            if (isJava && isMultitenant) {
                relationships.push({
                    insert: [serviceManager, 'name'],
                    into: [mtxSidecar, 'requires', 'name']
                })
            }

            const modules = !isMultitenant ? [srv, hdbDeployer] : [srv]

            await mergeYAML(
                mtaYAMLPath,
                `${__dirname}/files/mta.yaml.hbs`,
                projectDescriptor,
                { additions: [...modules, db].filter(a => a), deletions, relationships }
            )
        }

        if (hasHelm) {
            await mergeYAML(
                path.join(this.projectPath, 'chart', 'values.yaml'),
                path.join(__dirname, 'files', 'values.yaml.hbs'),
                projectDescriptor, { forceOverwrite: true })
            await fs.copy(
                path.join(__dirname, 'files', 'hana-deployer-job.yaml'),
                path.join(this.projectPath, 'chart', 'templates', 'hana-deployer-job.yaml')
            )
        }
    }

    async _updatePomXml() {
        // if called during cds init the project generation call to AT will add settings
        if (!this.options.add.has(OPTION_JAVA)) {
            const mvnAddHanaArgs = mvnArchetypes.getAddHanaCmdArgs(this.options);
            try {
                await commandUtil.spawnCommand('mvn', mvnAddHanaArgs, {
                    cwd: this.projectPath
                });
            } catch (err) {
                if (err.code === 'ENOENT' && err.path === 'mvn') {
                    throw new Error(`Maven executable 'mvn' not found, follow ${term.info(URLS.MAVEN_INSTALL_HELP)} and install Maven on your machine.`);
                }
                throw err;
            }
        }
    }

    async _updatePackageJson() {
        const packageJsonPath = path.join(this.projectPath, 'package.json')
        const dependenciesTemplatePath = path.join(__dirname, 'files', 'nodejs', 'dependencies.package.json');
        await mergeJSON(packageJsonPath, dependenciesTemplatePath);

        const packageJson = await read(packageJsonPath);
        if ('@sap/hana-client' in packageJson.dependencies) {
            delete packageJson.dependencies['@sap/hana-client'];
            await write(packageJsonPath, packageJson, { spaces: 2 });
        }

        await this._updateCdsConfiguration()
    }

    async _updateCdsConfiguration(configPath) {
        const projectType = await this.getProjectType();
        const configFile = projectType === PROJECT_TYPE.nodejs ? 'package.json' : '.cdsrc.json';
        configPath = configPath ?? path.join(this.projectPath, configFile)
        const projectDescriptor = await this.projectReader.read(this.options);
        const { for: forProfile } = projectDescriptor.cap;
        let json; try { json = await read(configPath, 'utf8') } catch { /* ignore */ }
        const _cds = projectType === PROJECT_TYPE.nodejs ? json?.cds : json;
        const shortcut = typeof _cds?.requires?.db === 'string' || !json ? 'shortcut.' : '';
        const profile = forProfile ? 'profile.' : '';
        const cdsTemplateFile = `cds.${shortcut}${profile}json.hbs`
        const { pLanguage } = projectDescriptor.cap;
        const cdsTemplatePath = path.join(__dirname, 'files', pLanguage, cdsTemplateFile);
        await mergeJSON(configPath, cdsTemplatePath, projectDescriptor, { forceOverwrite: true })
    }
}
