const path = require('path');
const { exists, read, copy, rimraf } = require('../../../cds').utils;
const ProjectReader = require('../../util/projectReader');
const { mergeYAML } = require('../../util/merge')
//const { yaml } = require('@sap/cds-foss')

module.exports = class HelmTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.projectReader = new ProjectReader(projectPath);
    }

    static hasFacet(_, projectPath, options) {
        // REVISIT: this works, but could be semantically nicer with a 'shouldRunDependentMerging' or the like
        if (options?.add.has('mta') && !options?.add.has('helm')) return false
        return exists(path.join(projectPath, 'chart', 'values.yaml'))
    }

    async canRun() {
        if (this.options.force) {
            await rimraf(path.join(this.projectPath, 'chart'))
            return true;
        }
        return true;
    }

    async run() {
        const projectDescriptor = await this.projectReader.read(this.options)

        await copy(
            path.join(__dirname, 'subchart'),
            path.join(this.projectPath, 'chart', 'charts', 'web-application'),
        )
        await copy(
            path.join(__dirname, 'chart'),
            path.join(this.projectPath, 'chart')
        )

        const webApplicationChartPath = process.env.WEB_APPLICATION_CHART ?? path.join(__dirname, 'subchart')
        const chartFilePath = path.join(webApplicationChartPath, 'Chart.yaml')
        const chartFile = await read(chartFilePath)
        //const { version } = yaml.parse(chartFile)

        await mergeYAML(
            path.join(this.projectPath, 'chart', 'Chart.yaml'),
            path.join(__dirname, 'files', 'Chart.yaml.hbs'),
            projectDescriptor, { forceOverwrite: true }
        )

        await mergeYAML(
            path.join(this.projectPath, 'chart', 'values.yaml'),
            path.join(__dirname, 'files', 'values.yaml.hbs'),
            projectDescriptor, { forceOverwrite: true }
        )
        await this.runDependentMerging();
    }

    async runDependentMerging() {
        // Re-applying the dependent merging part of other facets if necessary.
        const dependentFacets = ['hana', 'xsuaa', 'auditlog', 'enterprise-messaging', 'destinations' , 'multitenancy', 'extensibility']
        for (const facet of dependentFacets) {
            const Template = require('../'+facet)
            const template = new Template(this.projectPath, this.generator)
            if (Template.hasFacet(await this.getEnv(), this.projectPath, this.options)) await template.runDependentMerging()
        }
    }
};
