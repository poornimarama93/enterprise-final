const path = require('path')
const { exists, copy } = require('../../../cds').utils
const ProjectReader = require('../../util/projectReader')
const { mergeYAML } = require('../../util/merge')
const { OPTION_DESTINATIONS } = require('../../constants')

module.exports = class Html5RepoTemplate extends require('../templateBase') {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(projectPath)
    }

    async getDependencies() {
        return [OPTION_DESTINATIONS]
    }

    static hasFacet(_, projectPath) {
        // REVISIT: Should be detectable without helm charts
        return exists(path.join(projectPath, 'chart', 'templates', 'html5-apps-repo-host.yaml'))
    }

    async run() {
        await this.runDependentMerging()
    }

    async runDependentMerging() {
        const projectDescriptor = await this.projectReader.read(this.options)
        const { appName, hasHelm } = projectDescriptor.cap

        if (hasHelm) {
            await mergeYAML(
                path.join(this.projectPath, 'chart', 'values.yaml'),
                {
                    html5_apps_repo_host: {
                        serviceOfferingName: 'html5-apps-repo',
                        servicePlanName: 'app-host'
                    },
                    html5_apps_deployer: {
                        cloudService: null,
                        backendDestinations: {},
                        image: {
                            repository: `<your-container-registry>/${appName}-html5-deployer`,
                            tag: 'latest'
                        },
                        bindings: {
                            xsuaa:           { serviceInstanceName: 'xsuaa' },
                            destination:     { serviceInstanceName: 'destination' },
                            html5_apps_repo: { serviceInstanceName: 'html5-apps-repo-host' }
                        },
                        resources: {
                            limits:   { cpu: '2000m', memory: '1G' },
                            requests: { cpu: '1000m', memory: '1G' }
                        }
                    }
                },
                null, { forceOverwrite: true }
            )
            await copy(path.join(__dirname, 'files', '_html5_deployment_helpers.tpl'), path.join(this.projectPath, 'chart', 'templates', '_html5_deployment_helpers.tpl'))
            await copy(path.join(__dirname, 'files', 'html5-apps-deployer-job.yaml'), path.join(this.projectPath, 'chart', 'templates', 'html5-apps-deployer-job.yaml'))
            await copy(path.join(__dirname, 'files', 'html5-apps-repo-host.yaml'), path.join(this.projectPath, 'chart', 'templates', 'html5-apps-repo-host.yaml'))
        }
    }
}
