const cds = require ('@sap/cds/lib')
const DEBUG = cds.debug('mtx')

class MTXServices extends cds.Service { async init(){
  if (cds.mtx) {
    DEBUG && DEBUG ('bootstrapping old MTX...')
    return cds.mtx.in (cds.app) // old mtx
  }
  // else...
  DEBUG && DEBUG ('bootstrapping MTX services...')
  let defs = cds.model.definitions
  let sources = []

  if (cds.requires.multitenancy && !('cds.xt.SaasProvisioningService' in defs)) {
    sources.push('@sap/cds-mtxs/srv/cf/saas-provisioning-service')
    sources.push('@sap/cds-mtxs/srv/model-provider')
  }

  if (cds.requires.multitenancy && !('cds.xt.DeploymentService' in defs)) {
    sources.push('@sap/cds-mtxs/srv/deployment-service')
    sources.push('@sap/cds-mtxs/srv/model-provider')
  }

  if (cds.requires.extensibility && !('cds.xt.ExtensibilityService' in defs)) {
    sources.push('@sap/cds-mtxs/srv/extensibility-service')
    sources.push('@sap/cds-mtxs/srv/model-provider')
    if (cds.requires.multitenancy)
      sources.push('@sap/cds-mtxs/srv/deployment-service')
  }

  if (cds.requires.toggles && !('cds.xt.ModelProviderService' in defs)) {
    sources.push('@sap/cds-mtxs/srv/model-provider')
  }

  let models = cds.resolve(sources); if (!models) return
  let base = cds.model.$sources; models = models.filter(m => !base.includes(m))
  if (models.length) return cds.serve(models).in(cds.app)
}}
module.exports = MTXServices
