const cds = require('@sap/cds/lib')

const handleDefaults = require('./defaults')
const Extensions = 'cds.xt.Extensions'

const _updateExtensions = async function (ID, tag) {
  const updateCqn = UPDATE(Extensions)
    .with(`csn = REPLACE(csn, ',"@cds.extension":true', ''), activated = 'database'`)
    .where({ activated: 'propertyBag' })
  if (ID) {
    updateCqn.where('ID =', ID)
  } else if (tag) {
    updateCqn.where('tag =', tag)
  }
  await cds.db.run(updateCqn)
}

const _restoreDefaults = async function (appCsn) {
  const cqn = SELECT.from(Extensions).where({ activated: 'propertyBag' })
  const inactive = await cds.db.run(cqn)
  if (inactive.length) {
    for (const na of inactive) {
      for (const extension of JSON.parse(na.csn).extensions) {
        await handleDefaults(extension, appCsn, cds.db)
      }
    }
  }
}

const activate = async function (ID, tag, tenant, appCsn) {
  if (tenant) cds.context = { tenant }
  await _updateExtensions(ID, tag)

  const { 'cds.xt.DeploymentService': ds } = cds.services
  await ds.extend(tenant)

  // REVISIT: Workaround until schema evolution is implemented on Sqlite
  if (cds.db.kind === 'sqlite') _restoreDefaults(appCsn)
}

module.exports = activate
