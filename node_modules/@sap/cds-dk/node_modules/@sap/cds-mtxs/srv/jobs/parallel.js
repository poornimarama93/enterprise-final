// Helper functions to throttle parallel operations

async function asyncPool(poolSize, payloads, fn) {
  const pending = [], all = []
  for (const payload of payloads) {
    const execute = fn.constructor.name === 'AsyncFunction' ? fn(payload) : Promise.resolve().then(() => fn(payload))
    all.push(execute)
    const executeAndRemove = execute.then(() =>
      pending.splice(pending.indexOf(executeAndRemove), 1)
    )
    pending.push(executeAndRemove)
    if (pending.length >= poolSize) { // eslint-disable-next-line no-await-in-loop
      await Promise.race(pending)
    }
  }
  return Promise.allSettled(all)
}

module.exports = { asyncPool }
