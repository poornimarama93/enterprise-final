const cds = require('@sap/cds/lib')
const Tenants = 'cds.xt.Tenants'

exports.activated = 'Generic metadata'

// Add database-agnostic metadata handlers to DeploymentService...
cds.on ('served', () => {

  const { 'cds.xt.DeploymentService': ds } = cds.services

  ds.on ('subscribe', async (req, next) => {
    // REVISIT: Use UPSERT instead
    const { tenant:t, metadata } = req.data
    if (t === _t0()) return await next()
    try {
      await cds.tx({ tenant: _t0() }, tx =>
        tx.run(INSERT.into(Tenants, { ID: t, metadata: JSON.stringify(metadata) }))
      )
    } catch (e) {
      if (e.message !== 'ENTITY_ALREADY_EXISTS') throw e
    }
    await next()
  })
  ds.on ('unsubscribe', async (req, next) => {
    const { tenant:t } = req.data
    await cds.tx({ tenant: _t0() }, tx =>
      tx.run(DELETE.from(Tenants).where({ID:{'=':t}}))
    )
    await next()
  })

  function _t0() {
    return cds.env.requires.multitenancy.t0 ?? 't0'
  }

  return async function _resubscribeT0IfNeeded() {
    await cds.connect() // REVISIT: Ideally shouldn't be necessary
    // REVISIT: schema evolution/delta deployment (might be unnecessarily expensive tho)
    // REVISIT: more elegant way to compare table names?
    const tables = (await ds.getTables(_t0())).map(t => t.toLowerCase()) // different casing for SQLite/HANA
    const needsT0Redeployment = !tables.includes('cds_xt_tenants') || !tables.includes('cds_xt_jobs')
    await ds.tx({ tenant: _t0() }, async tx => {
      if (!needsT0Redeployment) return
      const csn = await cds.load(`${__dirname}/../../../db/t0.cds`)
      await tx.subscribe({ tenant: _t0(), options: { csn }})
    })
  }()
})
