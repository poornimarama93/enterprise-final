const cds = require('@sap/cds')
const { uuid } = cds.utils
const { url, sm_url, clientid, clientsecret } = cds.env.requires.db.credentials
const axios = require('axios')
const api = axios.create({ baseURL: sm_url + '/v1/', 'Content-Type': 'application/json' })
api.interceptors.request.use(async config => {
  config.headers.Authorization = await _token()
  return config
})

/* API */

async function create(tenant, parameters) {
  const name = await _instanceName4(tenant), service_plan_id = await _planId()
  let _instance, service_instance_id
  try {
    _instance = await api.post('service_instances', {
      name, service_plan_id, labels: { tenant_id: [tenant] }, parameters: parameters?.provisioning_parameters
    })
  } catch (e) {
    if (e.response.status === 409) service_instance_id = (await _instance4(tenant)).id
    else cds.error(_errorMessage(e, 'creating', tenant), { status: e.response.status })
  }
  service_instance_id = service_instance_id ?? await _poll(_instance.headers.location)
  const { data: { credentials }} = await api.post('service_bindings', {
    name: tenant + `-${uuid()}`, service_instance_id, labels: { tenant_id: [tenant], service_plan_id: [service_plan_id] }
  })
  return { name, tenant_id: tenant, credentials, tags: ['hana'] }
}

async function acquire(tenant, parameters) {
  try { return await get(tenant) } catch (e) {
    if (e.status === 404) return create(tenant, parameters)
    cds.error(_errorMessage(e, 'acquiring', tenant), { status: e.response.status })
  }
}

async function get(tenant) {
  const [{ credentials } = {}] = await _bindings4(tenant)
  if (!credentials) cds.error(`Tenant '${tenant}' does not exist`, { status: 404 })
  return { name: await _instanceName4(tenant), tenant_id: tenant, credentials, tags: ['hana'] }
}

function deploy(container, tenant, out, options) {
  return require('./hdi').deploy(container, tenant, out, options)
}

async function remove(tenant) {
  for (const { id } of await _bindings4(tenant)) {
    await api.delete(`service_bindings/${id}`)
  }
  const instance = await _instance4(tenant)
  if (instance) {
    const _delete = await api.delete(`service_instances/${instance.id}`)
    if (_delete.headers.location) await _poll(_delete.headers.location)
  }
}

module.exports = { create, get, acquire, deploy, delete: remove }

/* Private helpers */

async function _instance4(tenant) {
  const fieldQuery = `name eq '${await _instanceName4(tenant)}'`
  const instances = await api.get('service_instances', { params: { fieldQuery }})
  return instances.data.items[0]
}

async function _instanceName4(tenant) {
  // Compatible with `@sap/instance-manager`-created instances
  return require('crypto').createHash('sha256').update(`${await _planId()}_${tenant}`).digest('base64')
}

async function _bindings4(tenant) {
  const labelQuery = `service_plan_id eq '${await _planId()}' and tenant_id eq '${tenant}'`
  const { data } = await api.get('service_bindings', { params: { labelQuery }})
  return data.items
}

async function _planId() {
  if (_planId.cached) return _planId.cached
  const fieldQuery = `catalog_name eq 'hdi-shared' and service_offering_id eq '${await _offeringId()}'`
  const { data } = await api.get('service_plans', { params: { fieldQuery }})
  return _planId.cached = data.items[0].id
}

async function _offeringId() {
  if (_offeringId.cached) return _offeringId.cached
  const fieldQuery = `catalog_name eq 'hana'`
  const { data } = await api.get('service_offerings', { params: { fieldQuery }})
  return _offeringId.cached = data.items[0].id
}

async function _token() {
  if (!_token.cached || _token.cached.expiry < Date.now() + 30000) {
    const { data } = await axios.get(
      `${url}/oauth/token?grant_type=client_credentials&response_type=token`,
      { auth: { username: clientid, password: clientsecret }}
    )
    const { access_token, expires_in } = data
    _token.cached = { access_token, expiry: Date.now() + expires_in * 1000 }
  }
  return `Bearer ${_token.cached.access_token}`
}

async function _poll(location) {
  let attempts = 0
  const _next = async (resolve, reject) => {
    const { data: { state, resource_id, errors }} = await api.get(location.slice(4)) // Remove '/v1/'
    if (state === 'succeeded') return resolve(resource_id)
    if (state === 'failed') return reject(errors[0])
    if (attempts > 20) return reject(new Error(`Polling ${location} timed out`))
    setTimeout(++attempts && _next, 3000, resolve, reject)
  }
  return new Promise(_next);
}

function _errorMessage(e, action, tenant) {
  const msg = `Error ${action} tenant ${tenant}: ${e.response?.data?.error}`
  const cause = `Root Cause: ${e.response?.data?.description}`
  const { EOL } = require('os')
  return msg + EOL + cause
}
