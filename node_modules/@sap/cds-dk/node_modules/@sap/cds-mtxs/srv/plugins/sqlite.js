const cds = require('@sap/cds/lib'), {db} = cds.requires, {fs} = cds.utils
const LOG = cds.log('mtx')

exports.activated = db?.kind === 'sqlite' && 'SQLite database'
if (exports.activated) cds.on ('served', () => {

  const { 'cds.xt.DeploymentService': ds } = cds.services
  ds.on ('subscribe', async function (req) {
    const { tenant:t, options } = req.data
    return this.deploy (t,options)
  })

  ds.on ('deploy', async function (req) {
    const { tenant:t, options } = req.data
    const csn = await options?.csn || await csn4()
    LOG.info ('(re-)deploying SQLite database for tenant:', t)
    cds.context = {tenant:t}
    return await cds.deploy(csn).to('db')
  })

  ds.on (['upgrade','extend'], async function (req) {
    const { tenant:t } = req.data
    return this.deploy (t,{ csn: csn4(t) })
  })

  ds.on ('unsubscribe', async function (req) {
    const { tenant:t } = req.data
    const { url, database } = cds.env.requires.db.credentials
    if (url === ':memory:' || database === ':memory:') {
      cds.db?.disconnect(t) // REVISIT: do we really need that?
      cds.connect() // REVISIT: strange ?!?
    } else {
      const dbUrl = cds.db?.getDbUrl(t)
      cds.db?.disconnect(t)  // Delete active connection
      if (dbUrl) await fs.rimraf(dbUrl)
    }
  })
  ds.on ('getTables', async req => {
    const { tenant:t } = req.data
    return (await cds.tx({ tenant: t }, tx =>
      tx.run(`SELECT name FROM sqlite_master WHERE type = 'table'`)
    )).map(({ name }) => name)
  })

  async function csn4 (tenant) {
    const { 'cds.xt.ModelProviderService': mp } = cds.services
    return mp.getCsn ({ tenant, toggles: ['*'], activated: true }) // REVISIT: ['*'] should be the default
  }

  // workaround for SQLite:
  if (!cds.env.requires.multitenancy) cds.env.requires.multitenancy = true
})
